plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
}

group 'com.chilikinov'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

def
        junitVersion = "5.9.2",
        selenideVersion = "6.11.1",
        restAssured = "5.3.0",
        allureVersion = "2.19.0",
        slf4jVersion = "2.0.6",
        lombokVersion = "1.18.24"

allure {
    version.set(allureVersion)
    adapter { //отвечает за прявление папочки build/allure-results
        aspectjWeaver.set(true) //обработка аннотации @Step
        frameworks {
            junit5 { //название фреймворка
                adapterVersion.set(allureVersion) //варсия интеграции фреймворка и Allure
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

dependencies {
    testImplementation(
            "org.slf4j:slf4j-simple:$slf4jVersion"
            ,"io.rest-assured:rest-assured:$restAssured"
            ,"io.rest-assured:rest-assured-common:$restAssured"
            ,"io.rest-assured:json-path:$restAssured"
            ,"io.rest-assured:xml-path:$restAssured"
            ,"org.junit.jupiter:junit-jupiter:$junitVersion"
            ,"org.assertj:assertj-core:3.11.1"
            ,"org.hamcrest:hamcrest-all:1.3"
            ,"com.codeborne:selenide:$selenideVersion"
            ,"org.selenide:selenide-selenoid:2.3.4"
            ,"io.qameta.allure:allure-selenide:$allureVersion"
            ,"io.qameta.allure:allure-rest-assured:$allureVersion"
            ,"io.qameta.allure:allure-junit5:$allureVersion"
            ,"com.google.code.gson:gson:2.2.4"
            ,"org.aeonbits.owner:owner:1.0.12"
            ,"com.github.javafaker:javafaker:1.0.2"
            ,"com.google.code.gson:gson:2.2.4"
            ,"org.jsoup:jsoup:1.15.3"
    )

    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

tasks.withType(Copy).all {
    duplicatesStrategy 'exclude'
}

task regression_test(type: Test) {
    useJUnitPlatform {
        includeTags("reqres")
        includeTags("demowebshop")
        includeTags("gitrepo")
        includeTags("headhunter")
    }
}

